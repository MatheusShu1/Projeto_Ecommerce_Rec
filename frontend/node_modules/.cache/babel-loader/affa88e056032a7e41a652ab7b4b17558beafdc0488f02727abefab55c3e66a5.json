{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_USER_FAIL, REGISTER_USER_REQUEST, REGISTER_USER_SUCESS, LOAD_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOGOUT_FAIL, LOGOUT_SUCCESS, CLEAR_ERRORS, UPDATE_PROFILE_REQUEST, UPDATE_PASSWORD_REQUEST, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_FAIL, UPDATE_PROFILE_SUCCESS, UPDATE_PROFILE_FAIL, FORGOT_PASSWORD_FAIL, FORGOT_PASSWORD_REQUEST, FORGOT_PASSWORD_SUCCESS, NEW_PASSWORD_FAIL, NEW_PASSWORD_REQUEST, NEW_PASSWORD_SUCCESS } from \"../constants/userConstants\";\nimport axios from 'axios';\n\n// Login\n\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Register user\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/register', userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n// Load user\nexport const loadUser = userData => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/v1/me');\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n// Logout user\nexport const logoutUser = () => async dispatch => {\n  try {\n    await axios.get('/api/v1/logout');\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// edit user\nexport const updateProfile = userData => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PROFILE_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/me/update', userData, config);\n    dispatch({\n      type: UPDATE_PROFILE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PROFILE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n//update password\nexport const updatePassword = passwords => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put('/api/v1/password/update', passwords, config);\n    dispatch({\n      type: UPDATE_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Forgot password\nexport const forgotPassword = email => async dispatch => {\n  try {\n    dispatch({\n      type: FORGOT_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/v1/password/forgot', email, config);\n    dispatch({\n      type: FORGOT_PASSWORD_SUCCESS,\n      payload: data.message\n    });\n  } catch (error) {\n    dispatch({\n      type: FORGOT_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n//reset password\nexport const resetPassword = (token, passwords) => async dispatch => {\n  try {\n    dispatch({\n      type: NEW_PASSWORD_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\n    dispatch({\n      type: NEW_PASSWORD_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_PASSWORD_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\n\n// Clear Errors \nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_USER_FAIL","REGISTER_USER_REQUEST","REGISTER_USER_SUCESS","LOAD_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOGOUT_FAIL","LOGOUT_SUCCESS","CLEAR_ERRORS","UPDATE_PROFILE_REQUEST","UPDATE_PASSWORD_REQUEST","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_FAIL","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAIL","FORGOT_PASSWORD_FAIL","FORGOT_PASSWORD_REQUEST","FORGOT_PASSWORD_SUCCESS","NEW_PASSWORD_FAIL","NEW_PASSWORD_REQUEST","NEW_PASSWORD_SUCCESS","axios","login","email","password","dispatch","type","config","headers","data","post","payload","user","error","response","message","register","userData","loadUser","get","logoutUser","updateProfile","put","success","updatePassword","passwords","forgotPassword","resetPassword","token","clearErrors"],"sources":["/app/frontend/src/actions/userActions.js"],"sourcesContent":["import {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    REGISTER_USER_FAIL,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCESS,\r\n    LOAD_USER_FAIL,\r\n    LOAD_USER_REQUEST,\r\n    LOAD_USER_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    CLEAR_ERRORS,\r\n    UPDATE_PROFILE_REQUEST,\r\n    UPDATE_PASSWORD_REQUEST,\r\n    UPDATE_PASSWORD_SUCCESS,\r\n    UPDATE_PASSWORD_FAIL,\r\n    UPDATE_PROFILE_SUCCESS,\r\n    UPDATE_PROFILE_FAIL,\r\n    FORGOT_PASSWORD_FAIL,\r\n    FORGOT_PASSWORD_REQUEST,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    NEW_PASSWORD_FAIL,\r\n    NEW_PASSWORD_REQUEST,\r\n    NEW_PASSWORD_SUCCESS,\r\n\r\n} from \"../constants/userConstants\"\r\nimport axios from 'axios';\r\n\r\n// Login\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOGIN_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/v1/login', { email, password }, config);\r\n\r\n        dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Register user\r\nexport const register = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: REGISTER_USER_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/v1/register', userData, config);\r\n\r\n        dispatch({\r\n            type: REGISTER_USER_SUCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: REGISTER_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n// Load user\r\nexport const loadUser = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: LOAD_USER_REQUEST });\r\n\r\n        const { data } = await axios.get('/api/v1/me');\r\n\r\n        dispatch({\r\n            type: LOAD_USER_SUCCESS,\r\n            payload: data.user\r\n        })\r\n\r\n    } catch (error) {\r\n\r\n\r\n        dispatch({\r\n            type: LOAD_USER_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n// Logout user\r\nexport const logoutUser = () => async (dispatch) => {\r\n    try {\r\n\r\n        await axios.get('/api/v1/logout');\r\n\r\n        dispatch({\r\n            type: LOGOUT_SUCCESS,\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: LOGOUT_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// edit user\r\nexport const updateProfile = (userData) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_PROFILE_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put('/api/v1/me/update', userData, config);\r\n\r\n        dispatch({\r\n            type: UPDATE_PROFILE_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_PROFILE_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n//update password\r\nexport const updatePassword = (passwords) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: UPDATE_PASSWORD_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put('/api/v1/password/update', passwords, config);\r\n\r\n        dispatch({\r\n            type: UPDATE_PASSWORD_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_PASSWORD_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Forgot password\r\nexport const forgotPassword = (email) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: FORGOT_PASSWORD_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post('/api/v1/password/forgot', email, config);\r\n\r\n        dispatch({\r\n            type: FORGOT_PASSWORD_SUCCESS,\r\n            payload: data.message\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: FORGOT_PASSWORD_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n//reset password\r\nexport const resetPassword = (token, passwords) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: NEW_PASSWORD_REQUEST });\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/v1/password/reset/${token}`, passwords, config);\r\n\r\n        dispatch({\r\n            type: NEW_PASSWORD_SUCCESS,\r\n            payload: data.success\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: NEW_PASSWORD_FAIL,\r\n            payload: error.response.data.message\r\n        })\r\n    }\r\n}\r\n\r\n// Clear Errors \r\nexport const clearErrors = () => async (dispatch) => {\r\n    dispatch({\r\n        type: CLEAR_ERRORS\r\n    })\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}